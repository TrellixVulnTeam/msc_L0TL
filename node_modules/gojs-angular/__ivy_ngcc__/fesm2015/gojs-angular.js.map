{"version":3,"file":"gojs-angular.js","sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts"],"names":["go.Diagram","go.GraphLinksModel","go.Overview","go.Spot","go.Map"],"mappings":"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","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input() public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  private _mdaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    this._mdaDiffer = this._kvdiffers.find([]).create();\r\n  }\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n        this.diagram.layoutDiagram(true);\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && this.diagram && this.diagram.model && !this.diagram.model.isReadOnly) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Merges changes from app data into GoJS model data, \r\n   * making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n   * @param component an instance of DiagramComponent or PaletteComponent\r\n   * @param kvchanges The kvchanges object produced by either a node or link Angular differ object\r\n   * @param str \"n\" for node data changes, \"l\" for link data changes\r\n   *  */ \r\n  public static mergeChanges(component, kvchanges, str): boolean {\r\n\r\n    // helper function\r\n    function compareObjs(obj1, obj2) {\r\n\r\n      if (!obj1 || !obj2) return false;\r\n\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dia = component instanceof DiagramComponent ? component.diagram : component.palette;\r\n\r\n    if (!dia || !dia.model) return;\r\n\r\n    if (kvchanges) {\r\n\r\n      // handle added nodes / links\r\n      kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        switch (str) {\r\n          case \"n\": {\r\n            dia.model.addNodeData(r.currentValue);\r\n            break;\r\n          }\r\n          case \"l\": {\r\n            var m = <go.GraphLinksModel>dia.model;\r\n            m.addLinkData(r.currentValue);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      // handle removed nodes / links\r\n      kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        switch (str) {\r\n          case \"n\": {\r\n            let m = dia.model;\r\n            let keyPropName = m.nodeKeyProperty.toString();\r\n            var node = dia.findNodeForKey(r.previousValue[keyPropName]);\r\n            if (node) {\r\n              dia.remove(node);\r\n            }\r\n            break;\r\n          }\r\n          case \"l\": {\r\n            let m = <go.GraphLinksModel>dia.model;\r\n            var keyPropName = m.linkKeyProperty.toString();\r\n            var link = dia.findLinkForKey(r.previousValue[keyPropName]);\r\n            if (link) {\r\n              dia.remove(link);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      // handle changed data for nodes / links\r\n      kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        \r\n        // ensure \"changes\" to array / object / enumerable data properties are legit\r\n        const sameVals = compareObjs(r.currentValue, r.previousValue);\r\n\r\n        // update proper data object for node or link\r\n        if (!sameVals) {\r\n          switch (str) {\r\n            case \"n\": {\r\n              let m = dia.model;\r\n              let keyPropName = m.nodeKeyProperty.toString();\r\n              var node = dia.findNodeForKey(r.previousValue[keyPropName]);\r\n              if (node) {\r\n                // if the entry was replaced with null or undefined, just remove the entry altogther\r\n                // this is still pretty bad practice -- instead, users should remove entries in their node / link / model data, not set them to null\r\n                if (!r.currentValue) {\r\n                  dia.remove(node);\r\n                } else {\r\n                  dia.model.assignAllDataProperties(node.data, r.currentValue);\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              let m = <go.GraphLinksModel>dia.model;\r\n              var keyPropName = m.linkKeyProperty.toString();\r\n              var link = dia.findLinkForKey(r.previousValue[keyPropName]);\r\n              if (link) {\r\n                // if the entry was replaced with null or undefined, just remove the entry altogther\r\n                // this is still pretty bad practice -- instead, users should remove entries in their node / link / model data, not set them to null\r\n                if (!r.currentValue) {\r\n                  dia.remove(link);\r\n                } else {\r\n                  dia.model.assignAllDataProperties(link.data, r.currentValue);\r\n                }\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    var modelDiffs = this._mdaDiffer.diff(this.modelData);\r\n\r\n    if (!nodeDiffs && !linkDiffs && !modelDiffs) return;\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // update modelData first, in case bindings on nodes / links depend on model data\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    // merge node / link data\r\n    DiagramComponent.mergeChanges(this, nodeDiffs, \"n\");\r\n    DiagramComponent.mergeChanges(this, linkDiffs, \"l\");\r\n    this.diagram.model.commitTransaction('update data');\r\n\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  public ngOnDestroy() {\r\n    this.diagram.div = null; // removes event listeners\r\n  }\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { DiagramComponent } from './diagram.component';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  @Input() public skipsPaletteUpdate: boolean = false;\r\n\r\n  // model changed listener function for palette\r\n  public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  private _mdaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    this._mdaDiffer = this._kvdiffers.find([]).create();\r\n\r\n  } // end constructor\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n        this.palette.layoutDiagram(true);\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && this.palette && this.palette.model && !this.palette.model.isReadOnly) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n    if (!this.palette) return;\r\n    if (!this.palette.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsPaletteUpdate was false,\r\n    // such as remove ops that happened in GoJS when skipsPaletteUpdate = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    var modelDiffs = this._mdaDiffer.diff(this.modelData);\r\n\r\n    if (!nodeDiffs && !linkDiffs && !modelDiffs) return;\r\n\r\n    if (this.skipsPaletteUpdate) return;\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.palette.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.palette.model.startTransaction('update data');\r\n    // update modelData first, in case bindings on nodes / links depend on model data\r\n    this.palette.model.assignAllDataProperties(this.palette.model.modelData, this.modelData);\r\n    DiagramComponent.mergeChanges(this, nodeDiffs, \"n\");\r\n    DiagramComponent.mergeChanges(this, linkDiffs, \"l\");\r\n    this.palette.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.palette.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  public ngOnDestroy() {\r\n    this.palette.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.overview.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable()\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>, model?: go.Model) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        // Get the value of the node key property checking wether is a function or a string\r\n        const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n        modifiedNodesMap.set(key, nd);\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          const keyNdEntry = model ? model.getKeyForNodeData(ndEntry) : ndEntry['key'];\r\n          if (keyNdEntry === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n        if (changes.removedNodeKeys.includes(key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>, model?: go.GraphLinksModel) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        // Get the value of the link key\r\n        const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n        modifiedLinksMap.set(key, ld);\r\n\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          const keyLdEntry = model ? model.getKeyForLinkData(ldEntry) : ldEntry['key'];\r\n          if (keyLdEntry === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n        if (changes.removedLinkKeys.includes(key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DataSyncService } from './data-sync.service';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  providers: [\r\n    DataSyncService\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n"]}