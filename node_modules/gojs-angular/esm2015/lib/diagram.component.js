/**
 * @fileoverview added by tsickle
 * Generated from: lib/diagram.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
export class DiagramComponent {
    /**
     * @param {?} _kvdiffers
     * @param {?} zone
     */
    constructor(_kvdiffers, zone) {
        this._kvdiffers = _kvdiffers;
        this.zone = zone;
        // Link data for diagram
        this.linkDataArray = null; // optional
        // optional
        // Model data for diagram
        this.modelData = null; // optional
        // model changed listener function for diagram
        this.modelChangedListener = null;
        this.skipsDiagramUpdate = false;
        // event emitter -- fires when diagram model changes. Capture this emitted event in parent component
        this.modelChange = new EventEmitter();
        this.diagram = null;
        // differs used to check if there have been changed to the array @Inputs
        // without them, changes to the input arrays won't register in ngOnChanges,
        // since the array reference itself may be the same
        this._ndaDiffer = this._kvdiffers.find([]).create();
        this._ldaDiffer = this._kvdiffers.find([]).create();
        this._mdaDiffer = this._kvdiffers.find([]).create();
    }
    /**
     * Initializes diagram / model after view init
     * @return {?}
     */
    ngAfterViewInit() {
        this.diagram = this.initDiagram();
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the diagram,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.diagram.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
        // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        /** @type {?} */
        const divRef = this.diagramDiv.nativeElement;
        if (divRef === null)
            return;
        this.diagram.div = divRef;
        // initialize the Diagram's model
        this.diagram.delayInitialization((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const model = this.diagram.model;
            model.commit((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));
                if (this.linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));
                }
                if (this.modelData) {
                    m.assignAllDataProperties(m.modelData, this.modelData);
                }
                this.diagram.layoutDiagram(true);
            }), null);
        }));
        // initializer listener
        this.modelChangedListener = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.isTransactionFinished && this.diagram && this.diagram.model && !this.diagram.model.isReadOnly) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const dataChanges = (/** @type {?} */ (e.model)).toIncrementalData(e);
                    this.modelChange.emit(dataChanges);
                }));
            }
        });
        this.diagram.addModelChangedListener(this.modelChangedListener);
    } // end ngAfterViewInit
    // end ngAfterViewInit
    /**
     * Merges changes from app data into GoJS model data,
     * making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged
     * @param {?} component an instance of DiagramComponent or PaletteComponent
     * @param {?} kvchanges The kvchanges object produced by either a node or link Angular differ object
     * @param {?} str "n" for node data changes, "l" for link data changes
     *
     * @return {?}
     */
    static mergeChanges(component, kvchanges, str) {
        // helper function
        /**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        function compareObjs(obj1, obj2) {
            if (!obj1 || !obj2)
                return false;
            // Loop through properties in object 1
            for (const p in obj1) {
                // Check property exists on both objects
                if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p))
                    return false;
                switch (typeof (obj1[p])) {
                    // Deep compare objects
                    case 'object':
                        if (!compareObjs(obj1[p], obj2[p]))
                            return false;
                        break;
                    // Compare values
                    default:
                        if (obj1[p] !== obj2[p])
                            return false;
                }
            }
            // Check object 2 for any extra properties
            for (const p in obj2) {
                if (typeof (obj1[p]) === 'undefined')
                    return false;
            }
            return true;
        }
        /** @type {?} */
        var dia = component instanceof DiagramComponent ? component.diagram : component.palette;
        if (!dia || !dia.model)
            return;
        if (kvchanges) {
            // handle added nodes / links
            kvchanges.forEachAddedItem((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                switch (str) {
                    case "n": {
                        dia.model.addNodeData(r.currentValue);
                        break;
                    }
                    case "l": {
                        /** @type {?} */
                        var m = (/** @type {?} */ (dia.model));
                        m.addLinkData(r.currentValue);
                        break;
                    }
                }
            }));
            // handle removed nodes / links
            kvchanges.forEachRemovedItem((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                switch (str) {
                    case "n": {
                        /** @type {?} */
                        let m = dia.model;
                        /** @type {?} */
                        let keyPropName = m.nodeKeyProperty.toString();
                        /** @type {?} */
                        var node = dia.findNodeForKey(r.previousValue[keyPropName]);
                        if (node) {
                            dia.remove(node);
                        }
                        break;
                    }
                    case "l": {
                        /** @type {?} */
                        let m = (/** @type {?} */ (dia.model));
                        /** @type {?} */
                        var keyPropName = m.linkKeyProperty.toString();
                        /** @type {?} */
                        var link = dia.findLinkForKey(r.previousValue[keyPropName]);
                        if (link) {
                            dia.remove(link);
                        }
                        break;
                    }
                }
            }));
            // handle changed data for nodes / links
            kvchanges.forEachChangedItem((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                // ensure "changes" to array / object / enumerable data properties are legit
                /** @type {?} */
                const sameVals = compareObjs(r.currentValue, r.previousValue);
                // update proper data object for node or link
                if (!sameVals) {
                    switch (str) {
                        case "n": {
                            /** @type {?} */
                            let m = dia.model;
                            /** @type {?} */
                            let keyPropName = m.nodeKeyProperty.toString();
                            /** @type {?} */
                            var node = dia.findNodeForKey(r.previousValue[keyPropName]);
                            if (node) {
                                // if the entry was replaced with null or undefined, just remove the entry altogther
                                // this is still pretty bad practice -- instead, users should remove entries in their node / link / model data, not set them to null
                                if (!r.currentValue) {
                                    dia.remove(node);
                                }
                                else {
                                    dia.model.assignAllDataProperties(node.data, r.currentValue);
                                }
                            }
                            break;
                        }
                        case "l": {
                            /** @type {?} */
                            let m = (/** @type {?} */ (dia.model));
                            /** @type {?} */
                            var keyPropName = m.linkKeyProperty.toString();
                            /** @type {?} */
                            var link = dia.findLinkForKey(r.previousValue[keyPropName]);
                            if (link) {
                                // if the entry was replaced with null or undefined, just remove the entry altogther
                                // this is still pretty bad practice -- instead, users should remove entries in their node / link / model data, not set them to null
                                if (!r.currentValue) {
                                    dia.remove(link);
                                }
                                else {
                                    dia.model.assignAllDataProperties(link.data, r.currentValue);
                                }
                            }
                            break;
                        }
                    }
                }
            }));
        }
    }
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     * @return {?}
     */
    ngDoCheck() {
        if (!this.diagram)
            return;
        if (!this.diagram.model)
            return;
        // these need to be run each check, even if no merging happens
        // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,
        // such as remove ops that happened in GoJS when skipsDiagram = true, 
        // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)
        // Angular differs are a lot of fun
        /** @type {?} */
        var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);
        /** @type {?} */
        var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);
        /** @type {?} */
        var modelDiffs = this._mdaDiffer.diff(this.modelData);
        if (!nodeDiffs && !linkDiffs && !modelDiffs)
            return;
        if (this.skipsDiagramUpdate)
            return;
        // don't need model change listener while performing known data updates
        if (this.modelChangedListener !== null)
            this.diagram.model.removeChangedListener(this.modelChangedListener);
        this.diagram.model.startTransaction('update data');
        // update modelData first, in case bindings on nodes / links depend on model data
        this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);
        // merge node / link data
        DiagramComponent.mergeChanges(this, nodeDiffs, "n");
        DiagramComponent.mergeChanges(this, linkDiffs, "l");
        this.diagram.model.commitTransaction('update data');
        // reset the model change listener
        if (this.modelChangedListener !== null)
            this.diagram.model.addChangedListener(this.modelChangedListener);
    } // end ngDoCheck
    // end ngDoCheck
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.diagram.div = null; // removes event listeners
    }
}
DiagramComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-diagram',
                template: '<div #ngDiagram [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
DiagramComponent.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: NgZone }
];
DiagramComponent.propDecorators = {
    initDiagram: [{ type: Input }],
    nodeDataArray: [{ type: Input }],
    linkDataArray: [{ type: Input }],
    modelData: [{ type: Input }],
    divClassName: [{ type: Input }],
    skipsDiagramUpdate: [{ type: Input }],
    modelChange: [{ type: Output }],
    diagramDiv: [{ type: ViewChild, args: ['ngDiagram', { static: true },] }]
};
if (false) {
    /**
     * Diagram initialization function. Returns a go.Diagram.
     * Do not initialize model data in this function.
     * @type {?}
     */
    DiagramComponent.prototype.initDiagram;
    /** @type {?} */
    DiagramComponent.prototype.nodeDataArray;
    /** @type {?} */
    DiagramComponent.prototype.linkDataArray;
    /** @type {?} */
    DiagramComponent.prototype.modelData;
    /** @type {?} */
    DiagramComponent.prototype.divClassName;
    /** @type {?} */
    DiagramComponent.prototype.modelChangedListener;
    /** @type {?} */
    DiagramComponent.prototype.skipsDiagramUpdate;
    /** @type {?} */
    DiagramComponent.prototype.modelChange;
    /** @type {?} */
    DiagramComponent.prototype.diagramDiv;
    /** @type {?} */
    DiagramComponent.prototype.diagram;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._ndaDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._ldaDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._mdaDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._kvdiffers;
    /** @type {?} */
    DiagramComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,